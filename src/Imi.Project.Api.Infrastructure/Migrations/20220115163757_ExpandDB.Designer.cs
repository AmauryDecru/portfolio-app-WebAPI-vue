// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220115163757_ExpandDB")]
    partial class ExpandDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogPosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut auctor orci ac luctus pulvinar. Nam finibus a ante sed varius. Donec eget erat elit. Suspendisse lobortis suscipit leo. Morbi quis lorem lacus. Fusce elementum, mauris nec euismod finibus, sapien enim pharetra ex, ut porttitor risus sem nec ante. In dapibus libero ut mattis imperdiet. Nulla aliquam fermentum erat, non pellentesque enim vestibulum nec. Phasellus sit amet dui nunc. Integer placerat maximus sodales. Ut feugiat lorem quis eros dignissim, eu varius velit consectetur. Mauris pulvinar elementum orci vitae sodales. Morbi lacinia ultricies ligula id sollicitudin. Suspendisse consectetur nibh ac metus luctus facilisis.Suspendisse potenti. Nullam ut lorem auctor, lacinia mauris at, viverra est. Donec finibus odio eu leo efficitur, eget dapibus elit hendrerit. Aliquam eu rutrum justo. Pellentesque sagittis efficitur molestie. Fusce ut neque sit amet felis bibendum rutrum. Sed sit amet massa a urna volutpat sodales. Mauris elit nibh, ornare quis commodo a, pellentesque nec turpis. Nam ullamcorper nibh viverra turpis lobortis, laoreet eleifend erat lobortis. Integer sollicitudin metus tellus, et pretium nibh imperdiet ut.Aliquam cursus ligula sed erat volutpat accumsan. Fusce ut risus sollicitudin, tincidunt elit commodo, varius nunc. Vivamus fermentum eros at egestas tristique. Duis metus purus, auctor et congue vitae, finibus rhoncus arcu. Aenean lobortis, sem a rutrum commodo, urna velit posuere lacus, aliquam rutrum sapien lacus ac sem. Proin auctor, augue et tempor imperdiet, ante urna blandit tortor, vitae condimentum massa velit nec arcu. Mauris euismod magna id velit consectetur lacinia. Nam id sapien et justo tempor consectetur ac vitae massa.",
                            PostDate = new DateTime(2021, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Recept: Eclairs"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut auctor orci ac luctus pulvinar. Nam finibus a ante sed varius. Donec eget erat elit. Suspendisse lobortis suscipit leo. Morbi quis lorem lacus. Fusce elementum, mauris nec euismod finibus, sapien enim pharetra ex, ut porttitor risus sem nec ante. In dapibus libero ut mattis imperdiet. Nulla aliquam fermentum erat, non pellentesque enim vestibulum nec. Phasellus sit amet dui nunc. Integer placerat maximus sodales. Ut feugiat lorem quis eros dignissim, eu varius velit consectetur. Mauris pulvinar elementum orci vitae sodales. Morbi lacinia ultricies ligula id sollicitudin. Suspendisse consectetur nibh ac metus luctus facilisis.Suspendisse potenti. Nullam ut lorem auctor, lacinia mauris at, viverra est. Donec finibus odio eu leo efficitur, eget dapibus elit hendrerit. Aliquam eu rutrum justo. Pellentesque sagittis efficitur molestie. Fusce ut neque sit amet felis bibendum rutrum. Sed sit amet massa a urna volutpat sodales. Mauris elit nibh, ornare quis commodo a, pellentesque nec turpis. Nam ullamcorper nibh viverra turpis lobortis, laoreet eleifend erat lobortis. Integer sollicitudin metus tellus, et pretium nibh imperdiet ut.Aliquam cursus ligula sed erat volutpat accumsan. Fusce ut risus sollicitudin, tincidunt elit commodo, varius nunc. Vivamus fermentum eros at egestas tristique. Duis metus purus, auctor et congue vitae, finibus rhoncus arcu. Aenean lobortis, sem a rutrum commodo, urna velit posuere lacus, aliquam rutrum sapien lacus ac sem. Proin auctor, augue et tempor imperdiet, ante urna blandit tortor, vitae condimentum massa velit nec arcu. Mauris euismod magna id velit consectetur lacinia. Nam id sapien et justo tempor consectetur ac vitae massa.",
                            PostDate = new DateTime(2021, 9, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Nieuw product: Vegan Apple Crumble"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut auctor orci ac luctus pulvinar. Nam finibus a ante sed varius. Donec eget erat elit. Suspendisse lobortis suscipit leo. Morbi quis lorem lacus. Fusce elementum, mauris nec euismod finibus, sapien enim pharetra ex, ut porttitor risus sem nec ante. In dapibus libero ut mattis imperdiet. Nulla aliquam fermentum erat, non pellentesque enim vestibulum nec. Phasellus sit amet dui nunc. Integer placerat maximus sodales. Ut feugiat lorem quis eros dignissim, eu varius velit consectetur. Mauris pulvinar elementum orci vitae sodales. Morbi lacinia ultricies ligula id sollicitudin. Suspendisse consectetur nibh ac metus luctus facilisis.Suspendisse potenti. Nullam ut lorem auctor, lacinia mauris at, viverra est. Donec finibus odio eu leo efficitur, eget dapibus elit hendrerit. Aliquam eu rutrum justo. Pellentesque sagittis efficitur molestie. Fusce ut neque sit amet felis bibendum rutrum. Sed sit amet massa a urna volutpat sodales. Mauris elit nibh, ornare quis commodo a, pellentesque nec turpis. Nam ullamcorper nibh viverra turpis lobortis, laoreet eleifend erat lobortis. Integer sollicitudin metus tellus, et pretium nibh imperdiet ut.Aliquam cursus ligula sed erat volutpat accumsan. Fusce ut risus sollicitudin, tincidunt elit commodo, varius nunc. Vivamus fermentum eros at egestas tristique. Duis metus purus, auctor et congue vitae, finibus rhoncus arcu. Aenean lobortis, sem a rutrum commodo, urna velit posuere lacus, aliquam rutrum sapien lacus ac sem. Proin auctor, augue et tempor imperdiet, ante urna blandit tortor, vitae condimentum massa velit nec arcu. Mauris euismod magna id velit consectetur lacinia. Nam id sapien et justo tempor consectetur ac vitae massa.",
                            PostDate = new DateTime(2021, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Glazed in de Krant van West-Vlaanderen"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Taart"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Gebak"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Koekjes met glazuur"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Koekjes met rolfondant"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.DietaryRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("DietaryRequirements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "Vegan"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "Glutenvrij"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "Notenvrij"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Name = "Lactosevrij"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageURI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ImageURI = "kersenclafoutis.jpg",
                            LongDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut auctor orci ac luctus pulvinar. Nam finibus a ante sed varius. Donec eget erat elit. Suspendisse lobortis suscipit leo. Morbi quis lorem lacus. Fusce elementum, mauris nec euismod finibus, sapien enim pharetra ex, ut porttitor risus sem nec ante. In dapibus libero ut mattis imperdiet. Nulla aliquam fermentum erat, non pellentesque enim vestibulum nec. Phasellus sit amet dui nunc. Integer placerat maximus sodales. Ut feugiat lorem quis eros dignissim, eu varius velit consectetur. Mauris pulvinar elementum orci vitae sodales. Morbi lacinia ultricies ligula id sollicitudin. Suspendisse consectetur nibh ac metus luctus facilisis.",
                            Name = "Clafoutis van kersen",
                            Price = 8.50m,
                            ShortDescription = "Frans nagerecht van kersen in een lekker gebakken roommengsel uit de oven."
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ImageURI = "marblecake.jpg",
                            LongDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut auctor orci ac luctus pulvinar. Nam finibus a ante sed varius. Donec eget erat elit. Suspendisse lobortis suscipit leo. Morbi quis lorem lacus. Fusce elementum, mauris nec euismod finibus, sapien enim pharetra ex, ut porttitor risus sem nec ante. In dapibus libero ut mattis imperdiet. Nulla aliquam fermentum erat, non pellentesque enim vestibulum nec. Phasellus sit amet dui nunc. Integer placerat maximus sodales. Ut feugiat lorem quis eros dignissim, eu varius velit consectetur. Mauris pulvinar elementum orci vitae sodales. Morbi lacinia ultricies ligula id sollicitudin. Suspendisse consectetur nibh ac metus luctus facilisis.",
                            Name = "Marble Cake",
                            Price = 6m,
                            ShortDescription = "Marmercake is de ultieme combinatie van een vanillecake en een chocoladecake."
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000003"),
                            ImageURI = "pumpkincookie.jpg",
                            LongDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut auctor orci ac luctus pulvinar. Nam finibus a ante sed varius. Donec eget erat elit. Suspendisse lobortis suscipit leo. Morbi quis lorem lacus. Fusce elementum, mauris nec euismod finibus, sapien enim pharetra ex, ut porttitor risus sem nec ante. In dapibus libero ut mattis imperdiet. Nulla aliquam fermentum erat, non pellentesque enim vestibulum nec. Phasellus sit amet dui nunc. Integer placerat maximus sodales. Ut feugiat lorem quis eros dignissim, eu varius velit consectetur. Mauris pulvinar elementum orci vitae sodales. Morbi lacinia ultricies ligula id sollicitudin. Suspendisse consectetur nibh ac metus luctus facilisis.",
                            Name = "6 Vegan Pumpkin Cookies",
                            Price = 5m,
                            ShortDescription = "Vanille vegan koekjes met pompoenglazuur"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000002"),
                            ImageURI = "canneles.jpg",
                            LongDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut auctor orci ac luctus pulvinar. Nam finibus a ante sed varius. Donec eget erat elit. Suspendisse lobortis suscipit leo. Morbi quis lorem lacus. Fusce elementum, mauris nec euismod finibus, sapien enim pharetra ex, ut porttitor risus sem nec ante. In dapibus libero ut mattis imperdiet. Nulla aliquam fermentum erat, non pellentesque enim vestibulum nec. Phasellus sit amet dui nunc. Integer placerat maximus sodales. Ut feugiat lorem quis eros dignissim, eu varius velit consectetur. Mauris pulvinar elementum orci vitae sodales. Morbi lacinia ultricies ligula id sollicitudin. Suspendisse consectetur nibh ac metus luctus facilisis.",
                            Name = "6 Cannelés de Bordeaux",
                            Price = 4.50m,
                            ShortDescription = "Frans gebakje op smaak gebracht met rum, een culinaire specialiteit uit de streek rond Bordeaux"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000003"),
                            ImageURI = "peppermintcookie.jpg",
                            LongDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut auctor orci ac luctus pulvinar. Nam finibus a ante sed varius. Donec eget erat elit. Suspendisse lobortis suscipit leo. Morbi quis lorem lacus. Fusce elementum, mauris nec euismod finibus, sapien enim pharetra ex, ut porttitor risus sem nec ante. In dapibus libero ut mattis imperdiet. Nulla aliquam fermentum erat, non pellentesque enim vestibulum nec. Phasellus sit amet dui nunc. Integer placerat maximus sodales. Ut feugiat lorem quis eros dignissim, eu varius velit consectetur. Mauris pulvinar elementum orci vitae sodales. Morbi lacinia ultricies ligula id sollicitudin. Suspendisse consectetur nibh ac metus luctus facilisis.",
                            Name = "6 Chistmas Cinnamon Cookies",
                            Price = 5.50m,
                            ShortDescription = "Chocolade-kaneelkoekjes met vanille glazuur in Kertsthema."
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000004"),
                            ImageURI = "fondantcookie.jpeg",
                            LongDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut auctor orci ac luctus pulvinar. Nam finibus a ante sed varius. Donec eget erat elit. Suspendisse lobortis suscipit leo. Morbi quis lorem lacus. Fusce elementum, mauris nec euismod finibus, sapien enim pharetra ex, ut porttitor risus sem nec ante. In dapibus libero ut mattis imperdiet. Nulla aliquam fermentum erat, non pellentesque enim vestibulum nec. Phasellus sit amet dui nunc. Integer placerat maximus sodales. Ut feugiat lorem quis eros dignissim, eu varius velit consectetur. Mauris pulvinar elementum orci vitae sodales. Morbi lacinia ultricies ligula id sollicitudin. Suspendisse consectetur nibh ac metus luctus facilisis.",
                            Name = "6 Glazed Signature Fondant Cookies",
                            Price = 3.50m,
                            ShortDescription = "Vanillekoekjes van het huis met roze rolfondant en het Glazed-logo."
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ImageURI = "lemoncheesecake.jpg",
                            LongDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut auctor orci ac luctus pulvinar. Nam finibus a ante sed varius. Donec eget erat elit. Suspendisse lobortis suscipit leo. Morbi quis lorem lacus. Fusce elementum, mauris nec euismod finibus, sapien enim pharetra ex, ut porttitor risus sem nec ante. In dapibus libero ut mattis imperdiet. Nulla aliquam fermentum erat, non pellentesque enim vestibulum nec. Phasellus sit amet dui nunc. Integer placerat maximus sodales. Ut feugiat lorem quis eros dignissim, eu varius velit consectetur. Mauris pulvinar elementum orci vitae sodales. Morbi lacinia ultricies ligula id sollicitudin. Suspendisse consectetur nibh ac metus luctus facilisis.",
                            Name = "Lemon Cheescake",
                            Price = 7.50m,
                            ShortDescription = "Kaastaart met citroencoulis op een bodem van caramelcrumble."
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000003"),
                            ImageURI = "doughnutcookie.jpg",
                            LongDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut auctor orci ac luctus pulvinar. Nam finibus a ante sed varius. Donec eget erat elit. Suspendisse lobortis suscipit leo. Morbi quis lorem lacus. Fusce elementum, mauris nec euismod finibus, sapien enim pharetra ex, ut porttitor risus sem nec ante. In dapibus libero ut mattis imperdiet. Nulla aliquam fermentum erat, non pellentesque enim vestibulum nec. Phasellus sit amet dui nunc. Integer placerat maximus sodales. Ut feugiat lorem quis eros dignissim, eu varius velit consectetur. Mauris pulvinar elementum orci vitae sodales. Morbi lacinia ultricies ligula id sollicitudin. Suspendisse consectetur nibh ac metus luctus facilisis.",
                            Name = "6 Glazed Doughnut Cookies",
                            Price = 6.50m,
                            ShortDescription = "Glazed signature vanille-donutkoekjes met roze glazuur en sprinkles."
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000004"),
                            ImageURI = "marblecookie.jpg",
                            LongDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut auctor orci ac luctus pulvinar. Nam finibus a ante sed varius. Donec eget erat elit. Suspendisse lobortis suscipit leo. Morbi quis lorem lacus. Fusce elementum, mauris nec euismod finibus, sapien enim pharetra ex, ut porttitor risus sem nec ante. In dapibus libero ut mattis imperdiet. Nulla aliquam fermentum erat, non pellentesque enim vestibulum nec. Phasellus sit amet dui nunc. Integer placerat maximus sodales. Ut feugiat lorem quis eros dignissim, eu varius velit consectetur. Mauris pulvinar elementum orci vitae sodales. Morbi lacinia ultricies ligula id sollicitudin. Suspendisse consectetur nibh ac metus luctus facilisis.",
                            Name = "6 Valentine Fondant Cookies",
                            Price = 4.50m,
                            ShortDescription = "Hartvormige chocoladekoekjes met afwerking in rode rolfondant"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000001"),
                            ImageURI = "applecrumble.jpg",
                            LongDescription = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut auctor orci ac luctus pulvinar. Nam finibus a ante sed varius. Donec eget erat elit. Suspendisse lobortis suscipit leo. Morbi quis lorem lacus. Fusce elementum, mauris nec euismod finibus, sapien enim pharetra ex, ut porttitor risus sem nec ante. In dapibus libero ut mattis imperdiet. Nulla aliquam fermentum erat, non pellentesque enim vestibulum nec. Phasellus sit amet dui nunc. Integer placerat maximus sodales. Ut feugiat lorem quis eros dignissim, eu varius velit consectetur. Mauris pulvinar elementum orci vitae sodales. Morbi lacinia ultricies ligula id sollicitudin. Suspendisse consectetur nibh ac metus luctus facilisis.",
                            Name = "Vegan Apple Crumble",
                            Price = 7.50m,
                            ShortDescription = "Verse crumble met stukjes appel en kaneel, heerlijk warm met een bolltje vanille-ijs."
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ProductDietaryRequirement", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DietaryRequirementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "DietaryRequirementId");

                    b.HasIndex("DietaryRequirementId");

                    b.ToTable("ProductDietaryRequirement");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("00000000-0000-0000-0000-000000000002"),
                            DietaryRequirementId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            ProductId = new Guid("00000000-0000-0000-0000-000000000003"),
                            DietaryRequirementId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            ProductId = new Guid("00000000-0000-0000-0000-000000000003"),
                            DietaryRequirementId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            ProductId = new Guid("00000000-0000-0000-0000-000000000003"),
                            DietaryRequirementId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            ProductId = new Guid("00000000-0000-0000-0000-000000000003"),
                            DietaryRequirementId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            ProductId = new Guid("00000000-0000-0000-0000-000000000005"),
                            DietaryRequirementId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            ProductId = new Guid("00000000-0000-0000-0000-000000000005"),
                            DietaryRequirementId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            ProductId = new Guid("00000000-0000-0000-0000-000000000006"),
                            DietaryRequirementId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            ProductId = new Guid("00000000-0000-0000-0000-000000000006"),
                            DietaryRequirementId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            ProductId = new Guid("00000000-0000-0000-0000-000000000008"),
                            DietaryRequirementId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            ProductId = new Guid("00000000-0000-0000-0000-000000000009"),
                            DietaryRequirementId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            ProductId = new Guid("00000000-0000-0000-0000-000000000009"),
                            DietaryRequirementId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            ProductId = new Guid("00000000-0000-0000-0000-000000000009"),
                            DietaryRequirementId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            ProductId = new Guid("00000000-0000-0000-0000-000000000010"),
                            DietaryRequirementId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            ProductId = new Guid("00000000-0000-0000-0000-000000000010"),
                            DietaryRequirementId = new Guid("00000000-0000-0000-0000-000000000004")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Product", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ProductDietaryRequirement", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.DietaryRequirement", "DietaryRequirement")
                        .WithMany("ProductDietaryRequirements")
                        .HasForeignKey("DietaryRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Product", "Product")
                        .WithMany("ProductDietaryRequirements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
